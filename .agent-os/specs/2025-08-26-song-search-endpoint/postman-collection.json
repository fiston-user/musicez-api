{
  "info": {
    "name": "Song Search Endpoint API Collection",
    "description": "Postman collection for testing Song Search Endpoint endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{authToken}}",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"SecurePassword123!\",\n  \"name\": \"Test User\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "register"]
            }
          }
        },
        {
          "name": "Login User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"SecurePassword123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('authToken', response.data.tokens.accessToken);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Refresh Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "refresh"]
            }
          }
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "logout"]
            }
          }
        }
      ]
    },
    {
      "name": "Song Search",
      "item": [
        {
          "name": "Search Songs - Basic",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/songs/search?q=queen",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "songs", "search"],
              "query": [
                {
                  "key": "q",
                  "value": "queen",
                  "description": "Search query (required, min 2 characters)"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success field', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "});",
                  "",
                  "pm.test('Response has results array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('results');",
                  "    pm.expect(jsonData.data.results).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Response has metadata', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('metadata');",
                  "    pm.expect(jsonData.data.metadata).to.have.property('query');",
                  "    pm.expect(jsonData.data.metadata).to.have.property('total');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Search Songs - With Parameters",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/songs/search?q=bohemian rhapsody&limit=5&threshold=0.3",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "songs", "search"],
              "query": [
                {
                  "key": "q",
                  "value": "bohemian rhapsody",
                  "description": "Search query"
                },
                {
                  "key": "limit",
                  "value": "5",
                  "description": "Maximum results (1-50, default 20)"
                },
                {
                  "key": "threshold",
                  "value": "0.3",
                  "description": "Similarity threshold (0.1-1.0, default 0.3)"
                }
              ]
            }
          }
        },
        {
          "name": "Search Songs - Typo Test",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/songs/search?q=bohemian rapsoody&threshold=0.2",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "songs", "search"],
              "query": [
                {
                  "key": "q",
                  "value": "bohemian rapsoody",
                  "description": "Search query with typo"
                },
                {
                  "key": "threshold",
                  "value": "0.2",
                  "description": "Lower threshold for fuzzy matching"
                }
              ]
            }
          }
        },
        {
          "name": "Search Songs - Artist Search",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/songs/search?q=led zeppelin",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "songs", "search"],
              "query": [
                {
                  "key": "q",
                  "value": "led zeppelin",
                  "description": "Artist name search"
                }
              ]
            }
          }
        },
        {
          "name": "Search Songs - No Results",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/songs/search?q=nonexistent song xyz",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "songs", "search"],
              "query": [
                {
                  "key": "q",
                  "value": "nonexistent song xyz",
                  "description": "Query that should return no results"
                }
              ]
            }
          }
        },
        {
          "name": "Search Songs - Error: Missing Query",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/songs/search",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "songs", "search"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error response structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', false);",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData.error).to.have.property('code');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Search Songs - Error: Invalid Parameters",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/songs/search?q=a&limit=100&threshold=1.5",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "songs", "search"],
              "query": [
                {
                  "key": "q",
                  "value": "a",
                  "description": "Too short query"
                },
                {
                  "key": "limit",
                  "value": "100",
                  "description": "Too high limit"
                },
                {
                  "key": "threshold",
                  "value": "1.5",
                  "description": "Too high threshold"
                }
              ]
            }
          }
        },
        {
          "name": "Search Suggestions (Future)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/songs/search/suggestions?q=queen",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "songs", "search", "suggestions"],
              "query": [
                {
                  "key": "q",
                  "value": "queen",
                  "description": "Query prefix for autocomplete"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Health & Status",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          }
        },
        {
          "name": "API Root",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": ["{{baseUrl}}"],
              "path": [""]
            }
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-set baseUrl if not set",
          "if (!pm.collectionVariables.get('baseUrl')) {",
          "    pm.collectionVariables.set('baseUrl', 'http://localhost:3000');",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global response time test",
          "pm.test('Response time is less than 1000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(1000);",
          "});",
          "",
          "// Global content type test for JSON responses",
          "if (pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
          "    pm.test('Content-Type is application/json', function () {",
          "        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "    });",
          "}"
        ]
      }
    }
  ]
}