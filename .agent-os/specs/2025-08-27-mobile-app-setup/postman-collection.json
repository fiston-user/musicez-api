{
  "info": {
    "name": "Mobile App Setup API Collection",
    "description": "Postman collection for testing the mobile app authentication endpoints during the setup phase. This collection includes all authentication endpoints (register, login, refresh, logout) with example data and automatic token management.",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string",
      "description": "Base URL for the musicez API"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string",
      "description": "JWT access token for authenticated requests"
    },
    {
      "key": "refreshToken",
      "value": "",
      "type": "string",
      "description": "JWT refresh token for token renewal"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{accessToken}}",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "Authentication",
      "description": "Authentication endpoints for user registration, login, token refresh, and logout",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 201', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains user data and tokens', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('user');",
                  "    pm.expect(jsonData.data).to.have.property('accessToken');",
                  "    pm.expect(jsonData.data).to.have.property('refreshToken');",
                  "});",
                  "",
                  "pm.test('User object has required properties', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const user = jsonData.data.user;",
                  "    pm.expect(user).to.have.property('id');",
                  "    pm.expect(user).to.have.property('email');",
                  "    pm.expect(user).to.have.property('name');",
                  "});",
                  "",
                  "// Automatically save tokens to collection variables",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.success && jsonData.data) {",
                  "        pm.collectionVariables.set('accessToken', jsonData.data.accessToken);",
                  "        pm.collectionVariables.set('refreshToken', jsonData.data.refreshToken);",
                  "        console.log('Tokens saved successfully');",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"TestPassword123!\",\n  \"name\": \"Test User\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/register",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "auth",
                "register"
              ]
            },
            "description": "Register a new user account with email, password, and optional name"
          },
          "response": []
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains user data and tokens', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('user');",
                  "    pm.expect(jsonData.data).to.have.property('accessToken');",
                  "    pm.expect(jsonData.data).to.have.property('refreshToken');",
                  "});",
                  "",
                  "pm.test('Tokens are not empty strings', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.accessToken).to.not.be.empty;",
                  "    pm.expect(jsonData.data.refreshToken).to.not.be.empty;",
                  "});",
                  "",
                  "// Automatically save tokens to collection variables",
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.success && jsonData.data) {",
                  "        pm.collectionVariables.set('accessToken', jsonData.data.accessToken);",
                  "        pm.collectionVariables.set('refreshToken', jsonData.data.refreshToken);",
                  "        console.log('Login tokens saved successfully');",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"TestPassword123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "auth",
                "login"
              ]
            },
            "description": "Authenticate existing user with email and password"
          },
          "response": []
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains new tokens', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('accessToken');",
                  "    pm.expect(jsonData.data).to.have.property('refreshToken');",
                  "});",
                  "",
                  "pm.test('New tokens are not empty', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.accessToken).to.not.be.empty;",
                  "    pm.expect(jsonData.data.refreshToken).to.not.be.empty;",
                  "});",
                  "",
                  "// Automatically update tokens in collection variables",
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.success && jsonData.data) {",
                  "        pm.collectionVariables.set('accessToken', jsonData.data.accessToken);",
                  "        pm.collectionVariables.set('refreshToken', jsonData.data.refreshToken);",
                  "        console.log('Tokens refreshed and saved successfully');",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Check if refresh token exists",
                  "const refreshToken = pm.collectionVariables.get('refreshToken');",
                  "if (!refreshToken) {",
                  "    console.log('Warning: No refresh token found. Please login first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/refresh",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "auth",
                "refresh"
              ]
            },
            "description": "Refresh expired access token using refresh token"
          },
          "response": []
        },
        {
          "name": "Logout User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains logout message', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('message');",
                  "    pm.expect(jsonData.data.message).to.include('Logged out');",
                  "});",
                  "",
                  "// Clear tokens from collection variables after successful logout",
                  "if (pm.response.code === 200) {",
                  "    pm.collectionVariables.set('accessToken', '');",
                  "    pm.collectionVariables.set('refreshToken', '');",
                  "    console.log('Tokens cleared after successful logout');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Check if access token exists",
                  "const accessToken = pm.collectionVariables.get('accessToken');",
                  "const refreshToken = pm.collectionVariables.get('refreshToken');",
                  "",
                  "if (!accessToken) {",
                  "    console.log('Warning: No access token found. Please login first.');",
                  "}",
                  "",
                  "if (!refreshToken) {",
                  "    console.log('Warning: No refresh token found. Please login first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/logout",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "auth",
                "logout"
              ]
            },
            "description": "Invalidate user session and refresh token. Requires Bearer token authentication."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Health Check",
      "description": "Basic health check endpoints for testing API connectivity",
      "item": [
        {
          "name": "API Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "console.log('API is healthy and responding');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "health"
              ]
            },
            "description": "Basic health check to verify API connectivity"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "console.log('Making request to:', pm.request.url);",
          "",
          "// Add request timestamp for debugging",
          "pm.globals.set('requestTimestamp', new Date().toISOString());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "pm.test('Response has timestamp', function () {",
          "    const jsonData = pm.response.json();",
          "    if (jsonData && typeof jsonData === 'object') {",
          "        pm.expect(jsonData).to.have.property('timestamp');",
          "    }",
          "});",
          "",
          "// Log response time for monitoring",
          "console.log('Response time:', pm.response.responseTime + 'ms');"
        ]
      }
    }
  ]
}