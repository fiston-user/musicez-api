name: Deploy Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '20'

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.musicez-api.com
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --production
      
      - name: Generate Prisma Client
        run: npx prisma generate
      
      - name: Build application
        run: npm run build
      
      - name: Run database migrations
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        run: npx prisma migrate deploy
      
      - name: Health check
        run: |
          echo "Checking application health..."
          # Add health check commands here
      
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add actual deployment commands here
          # Example: rsync, SSH, cloud provider CLI, etc.
      
      - name: Verify deployment
        run: |
          echo "Verifying deployment..."
          # curl https://staging.musicez-api.com/health
      
      - name: Notify deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Staging deployment ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        continue-on-error: true

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://api.musicez.com
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --production
      
      - name: Generate Prisma Client
        run: npx prisma generate
      
      - name: Build application
        run: npm run build
      
      - name: Create backup
        run: |
          echo "Creating database backup..."
          # Add backup commands here
      
      - name: Run database migrations
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        run: npx prisma migrate deploy
      
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add actual deployment commands here
      
      - name: Health check
        run: |
          echo "Running health checks..."
          # curl https://api.musicez.com/health
      
      - name: Smoke tests
        run: |
          echo "Running smoke tests..."
          # Add smoke test commands
      
      - name: Rollback on failure
        if: failure()
        run: |
          echo "Rolling back deployment..."
          # Add rollback commands
      
      - name: Notify deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        continue-on-error: true

  post-deployment:
    name: Post Deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
      - name: Update documentation
        run: |
          echo "Updating API documentation..."
          # Add commands to update docs
      
      - name: Clear CDN cache
        run: |
          echo "Clearing CDN cache..."
          # Add CDN cache clearing commands
      
      - name: Monitor application
        run: |
          echo "Setting up monitoring alerts..."
          # Add monitoring setup commands
      
      - name: Generate deployment report
        run: |
          echo "Generating deployment report..."
          # Add report generation commands