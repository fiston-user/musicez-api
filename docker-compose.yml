services:
  postgres:
    image: postgres:16-alpine
    container_name: musicez-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: musicez_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - musicez-network

  redis:
    image: redis:7-alpine
    container_name: musicez-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - musicez-network

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: musicez-app
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/musicez_dev?schema=public
      REDIS_URL: redis://redis:6379
      PORT: 3000
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
      - ./prisma:/app/prisma
      - ./.env:/app/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - musicez-network
    command: npm run dev

networks:
  musicez-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: